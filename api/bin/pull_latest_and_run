#!/usr/bin/env bash

#
#  Pull latest API image from container registry and replace existing runing API container
#

set -o nounset
set -o pipefail
set -o errexit

CI_registry_server='registry.gitlab.com'
image="${CI_registry_server}/${GITLAB_USERNAME}/health-tracker:master"
container='health-tracker-api'
db_path_in_host='api/db.sqlite'

# Fail early if environment variables are missing
echo "${API_HOSTNAME}" > /dev/null
echo "${API_TOKEN}" > /dev/null

log () {
  BWhite='\033[1;37m'   # bold white
  Color_Off='\033[0m'   # reset colot
  printf >&2 "${BWhite}[INFO] ${1}${Color_Off}\n"
}

create_db_if_needed () {
  log "Checking if the DB file exists..."

  if [[ -f "${db_path_in_host}" ]]; then
    log "DB file exists, nothing to do"
    return
  fi

  log "DB file does not exist, creating it"
  touch "${db_path_in_host}"
}

log "pulling latest API container from container registry and replacing current running container with the pulled one"
log ""

log "making sure the DB exists by the time the server starts"
create_db_if_needed

log "logging into container registry"
docker login $CI_registry_server --username "${GITLAB_USERNAME}" --password "${GITLAB_CONTAINER_REGISTRY_TOKEN}"

log "stopping running container"
docker container stop "${container}" >/dev/null || echo ""
docker container wait "${container}" >/dev/null || echo ""

log "removing existing image"
docker image rm "${image}" || echo ""

log "downloading latest image from container registry"
docker image pull "${image}" || echo ""

log "starting container from new image"
docker container run \
  --rm \
  --detach \
  --publish '3001:3001' \
  --name "${container}" \
  --env "DATABASE_URL=/api/local.sqlite" \
  --env "API_PORT=3001" \
  --env "API_TOKEN=${API_TOKEN}" \
  --env "ENABLE_SWAGGER_UI=${ENABLE_SWAGGER_UI:-false}" \
  --env "API_HOSTNAME=${API_HOSTNAME}" \
  --volume "./${db_path_in_host}:/api/local.sqlite" \
  "${image}"
